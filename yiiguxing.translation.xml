<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogX" value="814" />
    <option name="newTranslationDialogY" value="425" />
    <histories>
      <item value="Transforms elements emitted by the original flow by applying transform, that returns another flow, and then merging and flattening these flows. This operator calls transform sequentially and then merges the resulting flows with a concurrency limit on the number of concurrently collected flows. It is a shortcut for map(transform).flattenMerge(concurrency). See flattenMerge for details. Note that even though this operator looks very familiar, we discourage its usage in a regular application-specific flows. Most likely, suspending operation in map operator will be sufficient and linear transformations are much easier to reason about. Operator fusion Applications of flowOn, buffer, and produceIn after this operator are fused with its concurrent merging so that only one properly configured channel is used for execution of merging logic." />
      <item value="This declaration is in a preview state and can be changed in a backwards-incompatible manner with a best-effort migration. Its usage should be marked with '@kotlinx.coroutines.FlowPreview' or '@OptIn(kotlinx.coroutines.FlowPreview::class)' if you accept the drawback of relying on preview API" />
      <item value="Set the domain pattern for this cookie. The cookie will match domain and all of its subdomains." />
      <item value="Unspecified" />
      <item value="Device Explorer is busy, please retry later or cancel current operation" />
      <item value="Returns a substring specified by the given range of indices." />
      <item value="horizontal" />
      <item value="Groups elements of the original collection by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements. The returned map preserves the entry iteration order of the keys produced from the original collection." />
      <item value="Sets the condition to keep the splash screen visible. The splash will stay visible until the condition isn't met anymore. The condition is evaluated before each request to draw the application, so it needs to be fast to avoid blocking the UI." />
      <item value="preparing Data" />
      <item value="JsonElement.toString properly prints JSON tree as valid JSON, taking into account quoted values and primitives. Whole hierarchy is serializable, but only when used with Json as JsonElement is purely JSON-specific structure which has a meaningful schemaless semantics only for JSON. The whole hierarchy is serializable only by Json format." />
      <item value="The base class for all errors and exceptions. Only instances of this class can be thrown or caught." />
      <item value="Expecting member declaration" />
      <item value="Anonymous functions with names are prohibited" />
      <item value="Action Bean" />
      <item value="Bean" />
      <item value="This annotation is not applicable to target 'value parameter'" />
      <item value="Define a constant instead of duplicating this literal" />
      <item value="Define a constant instead of duplicating this literal &quot;重要选项 1&quot; 3 times." />
      <item value="dismiss Allowing State Loss" />
      <item value="convenience method to get this element as a primitive integer value." />
      <item value="Class representing JSON object, consisting of name-value pairs, where value is arbitrary JsonElement Since this class also implements Map interface, you can use traditional methods like Map.get or Map.getValue to obtain Json elements." />
      <item value="Json Object" />
      <item value="A class representing an object type in Json. An object consists of name-value pairs where names are strings, and values are any other type of JsonElement. This allows for a creating a tree of JsonElements. The member elements of this object are maintained in order they were added. Author: Inderjeet Singh, Joel Leitch" />
      <item value="Illegal Argument Exception" />
      <item value="Throws an IllegalArgumentException if the value is false." />
      <item value="Returns a Flow whose values are generated with transform function by combining the most recently emitted values by each flow. It can be demonstrated with the following example: val flow = flowOf(1, 2).onEach { delay(10) } val flow2 = flowOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;).onEach { delay(15) } combine(flow, flow2) { i, s -&gt; i.toString() + s }.collect { println(it) Will print &quot;1a 2a 2b 2c&quot; } This function is a shorthand for combineTransform(flow, flow2) { a, b -&gt; emit(transform(a, b)) }" />
      <item value="Creates a channel with the specified buffer capacity (or without a buffer by default). See Channel interface documentation for details." />
      <item value="Refactor this method to reduce its Cognitive Complexity from 16 to the 15 allowed." />
      <item value="This class implements Parcelable but does not provide a CREATOR field" />
      <item value="item" />
      <item value="lz kit color Danger" />
      <item value="Screen On Or Off Receiver" />
      <item value="Instructs the Kotlin compiler to generate writeToParcel(), describeContents() android.os.Parcelable methods, as well as a CREATOR factory class automatically. The annotation is applicable only to classes that implements android.os.Parcelable (directly or indirectly). Note that only the primary constructor properties will be serialized." />
      <item value="nstructs the Kotlin compiler to generate writeToParcel(), describeContents() android.os.Parcelable methods, as well as a CREATOR factory class automatically. The annotation is applicable only to classes that implements android.os.Parcelable (directly or indirectly). Note that only the primary constructor properties will be serialized." />
      <item value="typealias" />
      <item value="'lateinit' modifier is not allowed on properties of nullable types" />
      <item value="'lateinit' modifier is not allowed on properties of primitive types" />
      <item value="subtitle" />
      <item value="Returns a string representation of this Int value in the specified radix." />
      <item value="Returns a string representation of the object" />
      <item value="error: failed to push some refs to 'git@gitlab.lizhi.fm:lizhifmandroid.git' hint: Updates were rejected because the remote contains work that you do" />
      <item value="hint: not have locally. This is usually caused by another repository pushing" />
      <item value="hint: not have locally. This is usually caused by another repository pushing Done hint: to the same ref. You may want to first integrate the remote changes hint: (e.g., 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. 16:35:12.841: [android] git -c credential.helper= -c core.quotepath=false -c log.showSignature=false push --progress --porcelain origin refsheadsfeature_ui_kit_widget:feature_ui_kit_widget --force-with-lease=feature_ui_kit_widget:116836b9526c0601930003b0409797cebad4c3c2 To gitlab.lizhi.fm:lizhifmandroid.git error: failed to push some refs to 'git@gitlab.lizhi.fm:lizhifmandroid.git' ! refsheadsfeature_ui_kit_widget:refsheadsfeature_ui_kit_widget [rejected] (stale info)" />
      <item value="Successfully rebased and updated refsheadsfeature_ui_kit_widget" />
      <item value="on Select" />
      <item value="A TextView which supports compatible features on older versions of the platform, including: Allows dynamic tint of its background via the background tint methods in androidx.core.view.ViewCompat. Allows setting of the background tint using androidx.appcompat.R.attr.backgroundTint and androidx.appcompat.R.attr.backgroundTintMode. Supports auto-sizing via TextViewCompat by allowing to instruct a TextView to let the size of the text expand or contract automatically to fill its layout based on the TextView's characteristics and boundaries. The style attributes associated with auto-sizing are androidx.appcompat.R.attr.autoSizeTextType, androidx.appcompat.R.attr.autoSizeMinTextSize, androidx.appcompat.R.attr.autoSizeMaxTextSize, androidx.appcompat.R.attr.autoSizeStepGranularity and androidx.appcompat.R.attr.autoSizePresetSizes, all of which work back to Ice Cream Sandwich. This will automatically be used when you use TextView in your layouts and the top-level activity dialog is provided by appcompat. You should only need to manually use this class when writing custom views." />
      <item value="set FinalizerWatchdogDaemon null success" />
      <item value="Returns the position of the ViewHolder in terms of the latest layout pass. This position is mostly used by RecyclerView components to be consistent while RecyclerView lazily processes adapter updates. For performance and animation reasons, RecyclerView batches all adapter updates until the next layout pass. This may cause mismatches between the Adapter position of the item and the position it had in the latest layout calculations. LayoutManagers should always call this method while doing calculations based on item positions. All methods in RecyclerView.LayoutManager, RecyclerView.State, RecyclerView.Recycler that receive a position expect it to be the layout position of the item. If LayoutManager needs to call an external method that requires the adapter position of the item, it can use getAbsoluteAdapterPosition() or RecyclerView.Recycler.convertPreLayoutPositionToPostLayout(int)." />
      <item value="RxNewThreadScheduler-3 3962 PlatformHttpUtils.getNetIp reacquire = true, locationModel = [121.8.148.108, 广州]" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="390" />
        <entry key="ENGLISH" value="380" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="FINNISH" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1651712696154" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>