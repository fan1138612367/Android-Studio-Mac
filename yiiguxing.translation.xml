<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogX" value="814" />
    <option name="newTranslationDialogY" value="425" />
    <histories>
      <item value="When LaunchedEffect enters the composition it will launch block into the composition's CoroutineContext. The coroutine will be cancelled and re-launched when LaunchedEffect is recomposed with a different key1. The coroutine will be cancelled when the LaunchedEffect leaves the composition. This function should not be used to (re-)launch ongoing tasks in response to callback events by way of storing callback data in MutableState passed to key1. Instead, see rememberCoroutineScope to obtain a CoroutineScope that may be used to launch ongoing jobs scoped to the composition in response to event callbacks." />
      <item value="Returns an object which can be used to invalidate the current scope at this point in composition. This object can be used to manually cause recompositions" />
      <item value="current Recompose Scope" />
      <item value="Named replacement in a URL path segment. Values are converted to strings using Retrofit.stringConverter(Type, Annotation[]) (or Object.toString(), if no matching string converter is installed) and then URL encoded." />
      <item value="Returns this value if it satisfies the given predicate or null, if it doesn't. For detailed usage information see the documentation for scope functions" />
      <item value="Represents this mutable state flow as a read-only state flow." />
      <item value="Too many arguments for public open fun actionMainFragmentToSongListFragment(): MainFragmentDirections.ActionMainFragmentToSongListFragment defined in com.example.ting.fragment.MainFragmentDirections" />
      <item value="Unexpected CPU variant for X86 using defaults: x86_64" />
      <item value="squash" />
      <item value="https:github.com Cym Chad Base Recycler View Adapter Helper" />
      <item value="Transforms elements emitted by the original flow by applying transform, that returns another flow, and then merging and flattening these flows. This operator calls transform sequentially and then merges the resulting flows with a concurrency limit on the number of concurrently collected flows. It is a shortcut for map(transform).flattenMerge(concurrency). See flattenMerge for details. Note that even though this operator looks very familiar, we discourage its usage in a regular application-specific flows. Most likely, suspending operation in map operator will be sufficient and linear transformations are much easier to reason about. Operator fusion Applications of flowOn, buffer, and produceIn after this operator are fused with its concurrent merging so that only one properly configured channel is used for execution of merging logic." />
      <item value="This declaration is in a preview state and can be changed in a backwards-incompatible manner with a best-effort migration. Its usage should be marked with '@kotlinx.coroutines.FlowPreview' or '@OptIn(kotlinx.coroutines.FlowPreview::class)' if you accept the drawback of relying on preview API" />
      <item value="Set the domain pattern for this cookie. The cookie will match domain and all of its subdomains." />
      <item value="Unspecified" />
      <item value="Device Explorer is busy, please retry later or cancel current operation" />
      <item value="Returns a substring specified by the given range of indices." />
      <item value="horizontal" />
      <item value="Groups elements of the original collection by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements. The returned map preserves the entry iteration order of the keys produced from the original collection." />
      <item value="Sets the condition to keep the splash screen visible. The splash will stay visible until the condition isn't met anymore. The condition is evaluated before each request to draw the application, so it needs to be fast to avoid blocking the UI." />
      <item value="preparing Data" />
      <item value="JsonElement.toString properly prints JSON tree as valid JSON, taking into account quoted values and primitives. Whole hierarchy is serializable, but only when used with Json as JsonElement is purely JSON-specific structure which has a meaningful schemaless semantics only for JSON. The whole hierarchy is serializable only by Json format." />
      <item value="The base class for all errors and exceptions. Only instances of this class can be thrown or caught." />
      <item value="Expecting member declaration" />
      <item value="Anonymous functions with names are prohibited" />
      <item value="Action Bean" />
      <item value="Bean" />
      <item value="This annotation is not applicable to target 'value parameter'" />
      <item value="Define a constant instead of duplicating this literal" />
      <item value="Define a constant instead of duplicating this literal &quot;重要选项 1&quot; 3 times." />
      <item value="dismiss Allowing State Loss" />
      <item value="convenience method to get this element as a primitive integer value." />
      <item value="Class representing JSON object, consisting of name-value pairs, where value is arbitrary JsonElement Since this class also implements Map interface, you can use traditional methods like Map.get or Map.getValue to obtain Json elements." />
      <item value="Json Object" />
      <item value="A class representing an object type in Json. An object consists of name-value pairs where names are strings, and values are any other type of JsonElement. This allows for a creating a tree of JsonElements. The member elements of this object are maintained in order they were added. Author: Inderjeet Singh, Joel Leitch" />
      <item value="Illegal Argument Exception" />
      <item value="Throws an IllegalArgumentException if the value is false." />
      <item value="Returns a Flow whose values are generated with transform function by combining the most recently emitted values by each flow. It can be demonstrated with the following example: val flow = flowOf(1, 2).onEach { delay(10) } val flow2 = flowOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;).onEach { delay(15) } combine(flow, flow2) { i, s -&gt; i.toString() + s }.collect { println(it) Will print &quot;1a 2a 2b 2c&quot; } This function is a shorthand for combineTransform(flow, flow2) { a, b -&gt; emit(transform(a, b)) }" />
      <item value="Creates a channel with the specified buffer capacity (or without a buffer by default). See Channel interface documentation for details." />
      <item value="Refactor this method to reduce its Cognitive Complexity from 16 to the 15 allowed." />
      <item value="This class implements Parcelable but does not provide a CREATOR field" />
      <item value="item" />
      <item value="lz kit color Danger" />
      <item value="Screen On Or Off Receiver" />
      <item value="Instructs the Kotlin compiler to generate writeToParcel(), describeContents() android.os.Parcelable methods, as well as a CREATOR factory class automatically. The annotation is applicable only to classes that implements android.os.Parcelable (directly or indirectly). Note that only the primary constructor properties will be serialized." />
      <item value="nstructs the Kotlin compiler to generate writeToParcel(), describeContents() android.os.Parcelable methods, as well as a CREATOR factory class automatically. The annotation is applicable only to classes that implements android.os.Parcelable (directly or indirectly). Note that only the primary constructor properties will be serialized." />
      <item value="typealias" />
      <item value="'lateinit' modifier is not allowed on properties of nullable types" />
      <item value="'lateinit' modifier is not allowed on properties of primitive types" />
      <item value="subtitle" />
      <item value="Returns a string representation of this Int value in the specified radix." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="395" />
        <entry key="ENGLISH" value="384" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="FRENCH" value="4" />
        <entry key="FINNISH" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1651712696154" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>