<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogX" value="814" />
    <option name="newTranslationDialogY" value="425" />
    <histories>
      <item value="Enlarge" />
      <item value="Enlarge Dialog Theme" />
      <item value="RETURN FROM SELECT LOCATION" />
      <item value="RETURN FROM EDIT NAME" />
      <item value="KEY BIRTHDAY" />
      <item value="KEY AGE" />
      <item value="KEY CONSTELLATION" />
      <item value="m User Constellation Btn" />
      <item value="constellation" />
      <item value="Versatile Recycler View" />
      <item value="render View" />
      <item value="override this method if you want to override click event logic" />
      <item value="on Create Def View Holder" />
      <item value="This method is because it can lead to crash: always call this method while RecyclerView is computing a layout or scrolling" />
      <item value="This seems like the library is partially migrated. Jetifier will try to rewrite the library anyway." />
      <item value="Local Pointer Icon Service" />
      <item value="The CompositionLocal to provide communication with platform text input service." />
      <item value="The CompositionLocal to provide the layout direction." />
      <item value="The CompositionLocal to provide haptic feedback to the user." />
      <item value="Moves focus in the specified direction. If you are not satisfied with the default focus order, consider setting a custom order using Modifier" />
      <item value="The CompositionLocal to provide platform font loading methods." />
      <item value="The CompositionLocal that can be used to control focus within Compose." />
      <item value="Provides the Density to be used to transform between density-independent pixelunits (DP) and pixel units or scale-independent pixel units (SP) and pixel units. This is typically used when a DP is provided and it must be converted in the body of Layout or DrawModifier." />
      <item value="The CompositionLocal to provide communication with platform clipboard service." />
      <item value="The CompositionLocal that can be used to add AutofillNodes to the autofill tree. The AutofillTree is a temporary data structure that will be replaced by Autofill Semantics (b138604305)." />
      <item value="Request autofill for the specified node." />
      <item value="Cancel a previously supplied autofill request." />
      <item value="originalTimeoutMillis - The timeout appropriate for users with no accessibility needs in milliseconds. containsIcons - The contents of UI contain icons. containsText - The contents of UI contain text. containsControls - The contents of UI contain controls" />
      <item value="The recommended UI timeout for the current user in milliseconds." />
      <item value="Calculate the recommended timeout for changes to the UI needed by this user. Controls should remain on the screen for at least this long to give users time to react. Some users may need extra time to review the controls, or to reach them, or to activate assistive technology to activate the controls automatically." />
      <item value="calculate Recommended Timeout Millis" />
      <item value="Conflicting import, imported name 'ViewCompositionStrategy' is ambiguous" />
      <item value="Provides a Context that can be used by Android applications" />
      <item value="Return the value provided by the nearest CompositionLocalProvider component that invokes, directly or indirectly, the composable function that uses this property." />
      <item value="Attempt to read from field 'androidx.fragment.app.FragmentContainerView com.example.ting.databinding.ActivityMainBinding.fragmentContainerView' on a null object reference" />
      <item value="When LaunchedEffect enters the composition it will launch block into the composition's CoroutineContext. The coroutine will be cancelled and re-launched when LaunchedEffect is recomposed with a different key1. The coroutine will be cancelled when the LaunchedEffect leaves the composition. This function should not be used to (re-)launch ongoing tasks in response to callback events by way of storing callback data in MutableState passed to key1. Instead, see rememberCoroutineScope to obtain a CoroutineScope that may be used to launch ongoing jobs scoped to the composition in response to event callbacks." />
      <item value="Returns an object which can be used to invalidate the current scope at this point in composition. This object can be used to manually cause recompositions" />
      <item value="current Recompose Scope" />
      <item value="Named replacement in a URL path segment. Values are converted to strings using Retrofit.stringConverter(Type, Annotation[]) (or Object.toString(), if no matching string converter is installed) and then URL encoded." />
      <item value="Returns this value if it satisfies the given predicate or null, if it doesn't. For detailed usage information see the documentation for scope functions" />
      <item value="Represents this mutable state flow as a read-only state flow." />
      <item value="Too many arguments for public open fun actionMainFragmentToSongListFragment(): MainFragmentDirections.ActionMainFragmentToSongListFragment defined in com.example.ting.fragment.MainFragmentDirections" />
      <item value="Unexpected CPU variant for X86 using defaults: x86_64" />
      <item value="squash" />
      <item value="https:github.com Cym Chad Base Recycler View Adapter Helper" />
      <item value="Transforms elements emitted by the original flow by applying transform, that returns another flow, and then merging and flattening these flows. This operator calls transform sequentially and then merges the resulting flows with a concurrency limit on the number of concurrently collected flows. It is a shortcut for map(transform).flattenMerge(concurrency). See flattenMerge for details. Note that even though this operator looks very familiar, we discourage its usage in a regular application-specific flows. Most likely, suspending operation in map operator will be sufficient and linear transformations are much easier to reason about. Operator fusion Applications of flowOn, buffer, and produceIn after this operator are fused with its concurrent merging so that only one properly configured channel is used for execution of merging logic." />
      <item value="This declaration is in a preview state and can be changed in a backwards-incompatible manner with a best-effort migration. Its usage should be marked with '@kotlinx.coroutines.FlowPreview' or '@OptIn(kotlinx.coroutines.FlowPreview::class)' if you accept the drawback of relying on preview API" />
      <item value="Set the domain pattern for this cookie. The cookie will match domain and all of its subdomains." />
      <item value="Unspecified" />
      <item value="Device Explorer is busy, please retry later or cancel current operation" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="410" />
        <entry key="ENGLISH" value="411" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="FRENCH" value="4" />
        <entry key="FINNISH" value="1" />
        <entry key="BENGALI" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1652145800234" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>